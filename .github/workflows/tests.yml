name: test
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  id_repo:
    runs-on: ubuntu-latest
    outputs:
      in_base_repo: ${{ steps.identify_repo.outputs.in_base_repo }}
    steps:
    - name: Identify repository
      id: identify_repo
      run: |
        echo "in_base_repo=${{ (github.event == 'push' && github.repository == 'Maison-de-la-Simulation/ddc') || github.event.pull_request.head.repo.full_name == 'Maison-de-la-Simulation/ddc' }}" >> "$GITHUB_OUTPUT"
        echo "$GITHUB_OUTPUT"

  docker-build-env:
    strategy:
      fail-fast: false
      matrix:
        image: ['test_env', 'jammy_env']
    needs: id_repo
    runs-on: ubuntu-latest
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false}
    - name: Checkout built branch
      uses: actions/checkout@v3
    - name: Build
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin || true
        docker pull ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}} || true
        docker build \
          --cache-from ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}} \
          -t ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}} \
          -t ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}}:${GITHUB_SHA:0:7} \
          -t ${{matrix.image}}_image \
          docker/${{matrix.image}}
    - name: Publish image for current SHA
      if: needs.id_repo.outputs.in_base_repo == 'true'
      run: |
        docker push ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}}:${GITHUB_SHA:0:7}
    - name: Publish latest (default) image 
      if: github.event_name == 'push' && github.ref_name == 'main' && needs.id_repo.outputs.in_base_repo == 'true'
      run: |
        docker push ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}}
    - name: Create image tarball
      if: needs.id_repo.outputs.in_base_repo == 'false'
      run: |
        docker save ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}}:${GITHUB_SHA:0:7} > ${{matrix.image}}.tar
    - name: Generate docker artifact from image
      if: needs.id_repo.outputs.in_base_repo == 'false'
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.image}}-artifact
        path: ${{matrix.image}}.tar
        retention-days: 1

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: 'include/ddc/ tests/ examples/'
        exclude: ''
        extensions: 'hpp,cpp'
        clangFormatVersion: 12

  test-build-and-run:
    strategy:
      fail-fast: false
      matrix:
        cxx_version:  ['17', '20']
        cmake_build_type: ['Debug', 'Release']
        kokkos_backend: ['CPU', 'HIP']
        image: ['test_env', 'jammy_env']
    runs-on: ubuntu-latest
    needs: [docker-build-env, id_repo]
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false}
    - name: Checkout built branch
      uses: actions/checkout@v3
      with: { submodules: recursive }
    - name: Collect image artifact
      if: needs.id_repo.outputs.in_base_repo == 'false'
      uses: actions/download-artifact@v3
      with: { name: '${{matrix.image}}-artifact' }
    - name: Load image artifact into docker
      if: needs.id_repo.outputs.in_base_repo == 'false'
      run: |
        docker load < ${{matrix.image}}.tar
        rm ${{matrix.image}}.tar
    - name: Build
      run: |
        cat<<-'EOF' > run.sh
          set -xe
          git config --global --add safe.directory '*'
          case "${{matrix.kokkos_backend}}" in
          'CUDA')
            export CC=gcc-10
            export CXX=g++-10
            export FC=gfortran-10
            EXTRA_CMAKE_FLAGS="-DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_AMPERE80=ON -DKokkos_ENABLE_LIBDL=OFF"
            CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror=vla -fno-omit-frame-pointer -fsanitize=address"
          ;;
          'HIP')
            export CC=/opt/rocm/hip/bin/hipcc
            export CXX=/opt/rocm/hip/bin/hipcc
            EXTRA_CMAKE_FLAGS="-DKokkos_ENABLE_HIP=ON -DKokkos_ARCH_VEGA90A=ON -DCMAKE_PREFIX_PATH=/opt/rocm"
            CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror=vla -fno-omit-frame-pointer -fsanitize=address"
          ;;
          *)
            CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror=vla -fno-omit-frame-pointer -fsanitize=address"
          ;;
          esac
          cmake \
            -DBUILD_BENCHMARKS=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.cmake_build_type}} \
            -DCMAKE_CXX_STANDARD=${{matrix.cxx_version}} \
            -DKokkos_ENABLE_DEPRECATED_CODE_3=OFF \
            -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \
            -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
            -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" \
            ${EXTRA_CMAKE_FLAGS} \
            /src
          make  -j 2 VERBOSE=1
          if [ 'xCPU' = "x${{matrix.kokkos_backend}}" ]
          then  ctest -j 2 --output-on-failure --timeout 5 --output-junit tests.xml
          fi
        EOF
        docker run -v ${PWD}:/src:ro ghcr.io/maison-de-la-simulation/ddc/${{matrix.image}}:${GITHUB_SHA:0:7} bash /src/run.sh
