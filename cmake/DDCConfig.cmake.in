# Copyright (C) The DDC development team, see COPYRIGHT.md file
#
# SPDX-License-Identifier: MIT

@PACKAGE_INIT@

macro(ddc_check_required_components _NAME)
   set(REQUIRED_COMPONENTS_NOT_FOUND "")
   foreach(comp ${${_NAME}_FIND_COMPONENTS})
      if(NOT ${_NAME}_${comp}_FOUND)
         if(${_NAME}_FIND_REQUIRED_${comp})
            list(APPEND REQUIRED_COMPONENTS_NOT_FOUND "${comp}")
            set(${_NAME}_FOUND FALSE)
         endif()
      endif()
   endforeach()

   if(REQUIRED_COMPONENTS_NOT_FOUND)
      set(${_NAME}_NOT_FOUND_MESSAGE "Component(s) not found: ${REQUIRED_COMPONENTS_NOT_FOUND}")
   endif()
   unset(REQUIRED_COMPONENTS_NOT_FOUND)
endmacro()

# Workaround for rocm <6 setting a cmake_minimum_required <3.12.
# When redefining `find_dependency` we get a better chance
# to use the NEW policy for CMP0074.
macro(ddc_find_dependency)
   include(CMakeFindDependencyMacro)
   find_dependency(${ARGN})
endmacro()

set(DDC_BUILD_DOUBLE_PRECISION @DDC_BUILD_DOUBLE_PRECISION@)

ddc_find_dependency(Kokkos 4.4...<5)

if(@DDC_BUILD_KERNELS_FFT@)
   ddc_find_dependency(KokkosFFT 0.2.1...<1)
endif()

if(@DDC_BUILD_KERNELS_SPLINES@)
   ddc_find_dependency(Ginkgo 1.8...<2)
   # DDC installs a FindLAPACKE.cmake file.
   # We choose to rely on it by prepending to CMAKE_MODULE_PATH
   # only the time of calling ddc_find_dependency.
   list(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})
   ddc_find_dependency(LAPACKE)
   list(POP_FRONT CMAKE_MODULE_PATH)
   ddc_find_dependency(KokkosKernels 4.5.1...<5)
endif()

if(@DDC_BUILD_PDI_WRAPPER@)
   ddc_find_dependency(PDI 1.6...<2 COMPONENTS C)
endif()

include(${CMAKE_CURRENT_LIST_DIR}/DDCTargets.cmake)

# We always define public alias targets when impl targets are available.
foreach(target core fft pdi splines)
   if((NOT TARGET DDC::${target}) AND (TARGET DDC::impl::ddc_${target}))
      add_library(DDC::${target} ALIAS DDC::impl::ddc_${target})
   endif()
endforeach()

# Components are found if the public targets exist
foreach(component ${DDC_FIND_COMPONENTS})
   if(TARGET DDC::${component})
      set(DDC_${component}_FOUND TRUE)
   endif()
endforeach()

ddc_check_required_components(DDC)
