name: test_and_deploy
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: 'include/ddc/ tests/'
        exclude: ''
        extensions: 'hpp,cpp'
        clangFormatVersion: 12
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout built branch
      uses: actions/checkout@v2
    - name: Build 
      run: |
        docker pull ghcr.io/maison-de-la-simulation/ddc/test_env || true
        docker build \
          --cache-from ghcr.io/maison-de-la-simulation/ddc/test_env \
          -t ghcr.io/maison-de-la-simulation/ddc/test_env \
          -t ghcr.io/maison-de-la-simulation/ddc/test_env:${GITHUB_SHA:0:7} \
          test_env
    - name: Publish
      if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/maison-de-la-simulation/ddc/test_env
        docker push ghcr.io/maison-de-la-simulation/ddc/test_env:${GITHUB_SHA:0:7}
  test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
    - name: Checkout built branch
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build 
      run: |
        cat<<-EOF > run.sh
          set -xe
          cmake -DCMAKE_CXX_FLAGS=-Wall -DBUILD_BENCHMARKS=ON -DCMAKE_BUILD_TYPE=Release /src
          make -j 2 VERBOSE=1
          ctest -j 2 --output-on-failure --timeout 5 --output-junit tests.xml
        EOF
        docker run -v ${PWD}:/src:ro ghcr.io/maison-de-la-simulation/ddc/test_env bash /src/run.sh
  pages:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout built branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Install deps
      run: |
        sudo apt-get install -y \
            doxygen \
            doxygen-latex \
            graphviz \
            texlive
    - name: Build site
      run: |
        cmake -DBUILD_DOCUMENTATION=ON -DDDC_BUILD_PDI_WRAPPER=OFF .
        if make doc 2>&1 | tee >(cat>&2) | grep ' warning: ' > /dev/null
        then
          make doc 2>&1 | grep ' warning: '
          exit 1
        fi
    - name: Publish site
      if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      run: |
        git worktree add -B gh-pages public remotes/origin/gh-pages
        find public -mindepth 1 -maxdepth 1 '!' -name .git -exec rm -rf '{}' '+'
        mv docs/html/* public/
        echo "ddc.mdls.fr" > public/CNAME
        git -C public config user.name "${GITHUB_ACTOR}"
        git -C public config user.email "${GITHUB_ACTOR}@noreply.example.com"
        git -C public add -A .
        git -C public commit -a -m "Update to match ${GITHUB_SHA} by ${GITHUB_EVENT_NAME} ${GITHUB_RUN_NUMBER}" || true
        git -C public push
  ddc_sync:
    runs-on: ubuntu-latest
    environment: ddc-deploy
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    steps:
    - name:
      run: curl -X POST -F "token=${{ secrets.VOICEXX_SYNC }}" -F ref=main https://gitlab.maisondelasimulation.fr/api/v4/projects/720/trigger/pipeline
